# 将当前目录中obj-y指定的.o文件和obj-y指定的子目录里的built-in.o编译成当前目录的built-in.o
# 假设当前目录的Makefile如下:
# obj-y += a.o
# obj-y += b.o
# obj-y += c/
# obj-y += d/

# 参考内核/scripts/Makefile.build，定义一个变量PHONY
PHONY := __build

# 将伪目标__build放在最前面，优先生成它
__build:

obj-y :=
# 将当前目录里的Makefile包含进来，以获得obj-y的值
include Makefile

# 获得字符串a.o b.o
c_obj := $(filter %.o, $(obj-y))

# 获得字符串c/built-in.o d/built-in.o
subdir := $(filter-out %.o, $(obj-y))
subdir := $(wildcard $(subdir))
subdir_obj := $(addsuffix built-in.o,$(subdir))

# 获得字符串.a.o.d .b.o.d
dep_file  := $(patsubst %.o,.%.o.d, $(c_obj))
dep_file := $(wildcard $(dep_file))

# 将依赖文件包含进来
ifneq ($(dep_file),)
  include $(dep_file)
endif

# 这两行非常重要，内核里也是这么做；
# 有了这两行才会优先生成目标$(subdir), 然后再生成目标built-in.o
PHONY += $(subdir)
__build : $(subdir) built-in.o

# c_obj即a.o b.o，subdir_obj即c/built-in.o d/built-in.o
built-in.o : $(c_obj) $(subdir_obj)
	$(LD) $^ -r -o $@

# 只要当前目录的任一.c文件被修过过，就会编译该.c文件
%.o : %.c
	$(CC) $(CFLAGS) -Wp,-MD,.$@.d $< -c -o $@

# 无条件进入所有子目录进行编译
$(subdir) : 
	make -C $@ -f $(TOPDIR)/Makefile.build

# 定义伪目标        
.PHONY: $(PHONY)
